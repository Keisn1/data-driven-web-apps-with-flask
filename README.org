* Data-driven web apps with Flask

[[https://github.com/talkpython/data-driven-web-apps-with-flask/tree/0d4e4d72be982f7e5050ee1a7293dbe4ade40ba6][Repo-Talk-Python]]
[[https://training.talkpython.fm/courses/details/building-data-driven-web-applications-in-python-with-flask-sqlalchemy-and-bootstrap][TalkPythonCourse]]

* Templates (Jinja 2)

- Goal: Given a list of category dictionaries with an image and name, display
  them in a responsive grid
  - Solution Jinja-Template

- Model-view-controller Scheme
  - controller (view-method)
    #+begin_src python
      def index():
          test_packages = [
              'package1',
              'package2',
              'package3',
          ]
          return flask.render_template('index.html', packages=test_packages)
    #+end_src
    - index.html is the view that we want to give
    - packages in render_template is the name we refer to in our template

- used CSS stylesheet
  - block syntax
  - span, colors

* Mapping URL's to Actions or View-Methods

- Trade-off Coding Simplicity and User Simplicity
- static vs. dynamic urls

** Views

- Idea is to factor our view-methods into different files

* Chapter 7 Bootstrap and frontend CSS frameworks

- Bootstrap is a frontend CSS framework
- other frameworks:
  - Semantic UI; Foundation (professionel designers), Materialize;
  - Search for TOP 10 Front-End Frameworks

* Links

[[https://unsplash.com/][Unsplash - Free Pictures]]

* SQLAlchemy and Databases
** General
- SQLAlchemy is a Data-access layer
- Provides an Object-relational Mapping (ORM)
- Mature and Fast (High Performing)
- DBA approved
  - Can swap out automatique SQL statement with Hand-optimized statements
- ORM = powerful and concise mapping of classes to data and queries
- Unit of work (Design Pattern)
  - Organizes pending /insert/update/delete/ into queues and flushes them all in
    one batch
  - contrary to *active record design pattern*
- Databases Supported
  - SQLite, PostgreSQL, MySQL, Oracle, MS-SQL, Firebird, Sybase and others
- Eager Loading
  - allows entire graphs of objects linked by collections and references to be
    loaded with few or just one query

** [[https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping][ORMs]]
- programming technique for converting data between a relational Database and
  the heap of an object-oriented programming language
- difference between Object-Orientation in the programming language and
  Storing of data by grouping scalars into, which are inserted into enumerated tables
  - similarity: whole collection can be manipulated as a single compound entity
  - differences:
    - no inheritence
    - references (object references vs key references)
    - lifecylce management (row insertion and deletion vs garbage collection
      and reference counting)
    - database tuples are shared vs. on-heap full control by single process
- heart of the problem: how to store the logical reprensentation of an object
  into atomized form, capable of being stored inside a database while
  preserving properties
  - *Persistence* - this described functionality is implemented

** Architeture

- 3 layers
  - Python DBAPI (Database API)
  - SQLAlchemy Core
  - Object Relational Mapper

*** DBAPI
- Standard API
- defines a way that Python can talk to different Databases

*** SQLAlchemy Core
- defines:
  - Schemas and Types
  - SQL Expression Language
  - Engine:
    - Dialect (Dialect of SQL)
    - manages Connection and Connection Pooling

*** Object Relational Mapper
- Object (Object in Object-oriented Programming)
- Relation (Database)
- a Mapper between those

- What we need to do is:
  - Define a bunch of classes that model our database
    - Packages, Releases, Users, Maintainers
- SQLAlchemy is going to create the Database

** Code

1. Setup Connection to Database
   - Type (PostgreSQL, SQLite)
2. Create a BaseClasses that wires stuff together
3. Model our classes
   - Mapping python classes into the table

*** Create Classes

- create fields by using SQLAlchemy-descriptors
- Purposes:
  - define Database Schema
  -
- Create Table "P"ackage (singular)

*** Connection to Database

- Operate around concept "Unit of Work" = "Session"
* Using SQLAlchemy
** Bin Folder
- little admin tasks (scripts)
- not directly involved in running the site
- more maintaining the site
- e.g. import some data
**

* Alembic

** Updating a column

1. Create initial structure (scaffolding)
   - Initializing
   - inside folder that contains the WebApp
   - alembic init alembic
2. Edit alembic.init
   1. Setup SqlAlchemy URL - sqlalchemy connection string
3. Create a revision
   - alembic revision --autogenerate -m 'Added last updated'
   - might need to add the right path to be recognised
   - folder = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
   - sys.path.insert(0, folder)
   - The version is created
4. Update the database
   - alembic upgrade head

** Creating a table
1. Create revision
   - will not work initially
   - need to add the newly table to __all_models.py

* User Input HTML and Validation

** Forms
1. Have an *action* and an *method*
2. Forms contain *input* elements
3. *inputs* have a *type* and *name* (and optionally *value*)
** Get Post Redirect Pattern
1. Client request page
   - http GET /accounts/register
   - will display HTML form
2. Edit locally
3. Click Submit
   - most times a POST request
4.
   1. Save validated data
   2. Send 302 redirect/welcome

[[https://en.wikipedia.org/wiki/Post/Redirect/Get][Post/Redirect/Get]]
** Register and Login
- register and login html with css
- basically an action method
- validation (better at later stages)
- passlib for password hashing and verifying
- redirection to some site if success
- db interactions
  - create_user
  - login_user
  - querying if user already exists
** Setting cookies
- goal is to make temp-approved cookies, not changeable by someone
* Viewmodels
** Motivation
- data exchange is deeply tied to
  - html template
  - what the view model has to pass to template
- therefore every viewmodel is different and tied to template
- but shared functionality:
  - every template has to have cookies for shared layout
  - most templates need to have error message
