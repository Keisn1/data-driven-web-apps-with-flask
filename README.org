* Data-driven web apps with Flask

[[https://github.com/talkpython/data-driven-web-apps-with-flask/tree/0d4e4d72be982f7e5050ee1a7293dbe4ade40ba6][Repo-Talk-Python]]
[[https://training.talkpython.fm/courses/details/building-data-driven-web-applications-in-python-with-flask-sqlalchemy-and-bootstrap][TalkPythonCourse]]

* Templates (Jinja 2)

- Goal: Given a list of category dictionaries with an image and name, display
  them in a responsive grid
  - Solution Jinja-Template

- Model-view-controller Scheme
  - controller (view-method)
    #+begin_src python
      def index():
          test_packages = [
              'package1',
              'package2',
              'package3',
          ]
          return flask.render_template('index.html', packages=test_packages)
    #+end_src
    - index.html is the view that we want to give
    - packages in render_template is the name we refer to in our template

- used CSS stylesheet
  - block syntax
  - span, colors

* Mapping URL's to Actions or View-Methods

- Trade-off Coding Simplicity and User Simplicity
- static vs. dynamic urls

** Views

- Idea is to factor our view-methods into different files

* Chapter 7 Bootstrap and frontend CSS frameworks

- Bootstrap is a frontend CSS framework
- other frameworks:
  - Semantic UI; Foundation (professionel designers), Materialize;
  - Search for TOP 10 Front-End Frameworks

* Links

[[https://unsplash.com/][Unsplash - Free Pictures]]

* SQLAlchemy and Databases
** General
- SQLAlchemy is a Data-access layer
- Provides an Object-relational Mapping (ORM)
- Mature and Fast (High Performing)
- DBA approved
  - Can swap out automatique SQL statement with Hand-optimized statements
- ORM = powerful and concise mapping of classes to data and queries
- Unit of work (Design Pattern)
  - Organizes pending /insert/update/delete/ into queues and flushes them all in
    one batch
  - contrary to *active record design pattern*
- Databases Supported
  - SQLite, PostgreSQL, MySQL, Oracle, MS-SQL, Firebird, Sybase and others
- Eager Loading
  - allows entire graphs of objects linked by collections and references to be
    loaded with few or just one query

** [[https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping][ORMs]]
- programming technique for converting data between a relational Database and
  the heap of an object-oriented programming language
- difference between Object-Orientation in the programming language and
  Storing of data by grouping scalars into, which are inserted into enumerated tables
  - similarity: whole collection can be manipulated as a single compound entity
  - differences:
    - no inheritence
    - references (object references vs key references)
    - lifecylce management (row insertion and deletion vs garbage collection
      and reference counting)
    - database tuples are shared vs. on-heap full control by single process
- heart of the problem: how to store the logical reprensentation of an object
  into atomized form, capable of being stored inside a database while
  preserving properties
  - *Persistence* - this described functionality is implemented

** Architeture

- 3 layers
  - Python DBAPI (Database API)
  - SQLAlchemy Core
  - Object Relational Mapper

*** DBAPI
- Standard API
- defines a way that Python can talk to different Databases

*** SQLAlchemy Core
- defines:
  - Schemas and Types
  - SQL Expression Language
  - Engine:
    - Dialect (Dialect of SQL)
    - manages Connection and Connection Pooling

*** Object Relational Mapper
- Object (Object in Object-oriented Programming)
- Relation (Database)
- a Mapper between those

- What we need to do is:
  - Define a bunch of classes that model our database
    - Packages, Releases, Users, Maintainers
- SQLAlchemy is going to create the Database

** Code

1. Setup Connection to Database
   - Type (PostgreSQL, SQLite)
2. Create a BaseClasses that wires stuff together
3. Model our classes
   - Mapping python classes into the table

*** Create Classes

- create fields by using SQLAlchemy-descriptors
- Purposes:
  - define Database Schema
  -
- Create Table "P"ackage (singular)

*** Connection to Database

- Operate around concept "Unit of Work" = "Session"
* Using SQLAlchemy
** Bin Folder
- little admin tasks (scripts)
- not directly involved in running the site
- more maintaining the site
- e.g. import some data
**

* Alembic

** Updating a column

1. Create initial structure (scaffolding)
   - Initializing
   - inside folder that contains the WebApp
   - alembic init alembic
2. Edit alembic.init
   1. Setup SqlAlchemy URL - sqlalchemy connection string
3. Create a revision
   - alembic revision --autogenerate -m 'Added last updated'
   - might need to add the right path to be recognised
   - folder = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
   - sys.path.insert(0, folder)
   - The version is created
4. Update the database
   - alembic upgrade head

** Creating a table
1. Create revision
   - will not work initially
   - need to add the newly table to __all_models.py

* User Input HTML and Validation

** Forms
1. Have an *action* and an *method*
2. Forms contain *input* elements
3. *inputs* have a *type* and *name* (and optionally *value*)
** Get Post Redirect Pattern
1. Client request page
   - http GET /accounts/register
   - will display HTML form
2. Edit locally
3. Click Submit
   - most times a POST request
4.
   1. Save validated data
   2. Send 302 redirect/welcome

[[https://en.wikipedia.org/wiki/Post/Redirect/Get][Post/Redirect/Get]]
** Register and Login
- register and login html with css
- basically an action method
- validation (better at later stages)
- passlib for password hashing and verifying
- redirection to some site if success
- db interactions
  - create_user
  - login_user
  - querying if user already exists
** Setting cookies
- goal is to make temp-approved cookies, not changeable by someone
* Viewmodels
** Motivation
- data exchange is deeply tied to
  - html template
  - what the view model has to pass to template
- therefore every viewmodel is different and tied to template
- but shared functionality:
  - every template has to have cookies for shared layout
  - most templates need to have error message
  -
** How do they work
1. User is submitting a form
2.
3.
** Benefits
- write simpler view-methods
- provide 2 basic services
  - data exchange and normalization
  - validation
* Testing
- 3 types of tests Viewmodels, View and Integration
** ViewModel
- requires request object
  - pre-populated
- don't talk to DB directly
- the 'simplest'
** ViewMethod
- also requires request
- testing register_post
** Integration
- create entire web=application
- fake HTTP requests
** Organizing
- all into test folder
- typically group tests by controller
* Deployment
** Architecture/Topology
1. Get Ubuntu Server
2. Install NginX
   - what people actually talk to
   - on port 80 or 443 (encrypted) for regular HTTP
   - serves up static files
   - doesn't run python code
   - delegates to the thing that runs python code
3. MicroWSGI (uWSGI)
   - will handle python requests
   - multiple
   - hosts Python Runtime
   - copies of website, running in parallel
*** Process
- incoming https
- inside server http to WSGI
- assigns task to worker
- responds to NginX

** Hosting
- i.e. DigitalOcean
- ssh into the instance
- first things to do:
  - software patches
  - apt update in the instance of ubuntu
  - apt upgrade
  - reboot!

** Files
*** server folder
**** pypi.nginx
**** pypi.service
- unit file
- background daemon
- code gets run when system starts
- runs uWSGI
- create wsgi.py file
  #+begin_src python
    import pypi_org.app import app, main

    if __name__ == '__main__':
        main()
  #+end_src
**** server_setup.sh
#+begin_src bash

  #!/usr/bin/env bash

  # Consider running these two commands separately
  # Do a reboot before continuing.
  apt update
  apt upgrade -y

  apt install zsh                 # install zsh
  sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" # install oh-my-zsh

  # Install some OS dependencies:
  sudo apt-get install -y -q build-essential git unzip zip nload tree # install utilities
  sudo apt-get install -y -q python3-pip python3-dev python3-venv     # install python dependencies
  sudo apt-get install -y -q nginx
  # for gzip support in uwsgi
  sudo apt-get install --no-install-recommends -y -q libpcre3-dev libz-dev # gzip support in uWSGI

  # Stop the hackers
  sudo apt install fail2ban -y    # ssh fails are blacklisted

  ufw allow 22                    # expose necessary ports
  ufw allow 80                    # ufw = uncomplicated firewalls
  ufw allow 443
  ufw enable                      # turn it on

  # Basic git setup
  git config --global credential.helper cache
  git config --global credential.helper 'cache --timeout=720000'

  # Be sure to put your info here:
  git config --global user.email "you@email.com" # if you ever want to push
  git config --global user.name "Your name"

  # Web app file structure
  mkdir /apps
  chmod 777 /apps
  mkdir /apps/logs
  mkdir /apps/logs/pypi
  mkdir /apps/logs/pypi/app_log
  cd /apps

  # Create a virtual env for the app.
  cd /apps
  python3 -m venv venv
  source /apps/venv/bin/activate
  pip install --upgrade pip setuptools
  pip install --upgrade httpie glances
  pip install --upgrade uwsgi

  # clone the repo:
  cd /apps
  git clone https://github.com/talkpython/data-driven-web-apps-with-flask app_repo

  # Setup the web app:
  cd cd /apps/app_repo/app/ch15_deploy/final/
  pip install -r requirements.txt

  # Copy and enable the daemon
  cp /apps/app_repo/app/ch15_deploy/final/server/pypi.service /etc/systemd/system/pypi.service # this is running uWSGI PyPI server instance
  # adds also behavior on server-startup
  systemctl start pypi
  systemctl status pypi
  systemctl enable pypi

  # Setup the public facing server (NGINX)
  apt install nginx

  # CAREFUL HERE. If you are using default, maybe skip this
  rm /etc/nginx/sites-enabled/default

  cp /apps/app_repo/app/ch15_deploy/final/server/pypi.nginx /etc/nginx/sites-enabled/pypi.nginx
  update-rc.d nginx enable
  service nginx restart


  # Optionally add SSL support via Let's Encrypt:
  # https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04

  add-apt-repository ppa:certbot/certbot
  apt install python-certbot-nginx
  certbot --nginx -d fakepypi.talkpython.com
#+end_src
*** Tweaks
- add source path/to/venv to zshrc or bashrc, so that of server entrance you're
  inside the virtual env
* What I learned

** Jinja2 Basics
  - dynamic templates
  - {% *iterables* / *if statements* %} and { *values* } blocks
    - {% endfor/endif %}

** CSS and Layout pages
- not replicating sites but use *extends* and create blocks
  1. Create Jinja template
  2. page template extends shared layout template

** Routes
- view methods and templates in place -> need to map URL's map over to viewmethods
- <> brackets in url become variables in viewmethod
  - even have constraints

** Using bootstrap
- take themes and plop into shared_layout
  - include css and javascript files and images
  - drop in theme
  - startBootstrap and WrapBootstrap for themes

** Querying data
- Unit of Work design pattern
  1. Create a session
  2. Create a query
  3. commit

** Using alembic
1. init alembic
2. version revision
3. remap schema

** HTML forms and accepting Input
- Get/Post/Redirect Pattern

** View model pattern
- Viewmodels
  - tightly tied to html-form that they are exchanging data with
  - can be used for validation
  - makes testing easier
  - makes action/view method simpler

** Testing

*** Viewmodel
*** Viewmethods
*** Integration
- fake HTTP request
** uWSGI
** MongoDB
